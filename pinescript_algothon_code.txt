//@version=3
strategy("Quadratic Regression",overlay=true,initial_capital=1000000,
     currency=currency.USD, default_qty_type=strategy.percent_of_equity,
         default_qty_value=99.8, commission_value=0)

//===INPUTS===

length = input(9)

adxlen = input(16, title="ADX Smoothing")
dilen = input(37, title="DI Length")

diff_tol    = input(0.022)  // Difference tolerance
sig_tol     = input(9)      // ADX tolerance
exit_tol    = input(6)      // Additional tolerance for an exit

//vol_tol     = input(200 * 1000000)
//vol_len     = input(30)

//===INPUT ADJUSTMENTS===

//vol_fac  = (sma(volume,30) / vol_tol) 

//===BACKTEST TIME RANGE===

fromMonth = input(1)
fromDay   = input(1)
fromYear  = input(2017)
thruMonth = input(9)
thruDay   = input(30)
thruYear  = input(2020)

showDate  = true

start     = timestamp(fromYear, fromMonth, fromDay, 00, 00)        // backtest start window
finish    = timestamp(thruYear, thruMonth, thruDay, 23, 59)        // backtest finish window
window()  => time >= start and time <= finish ? true : false       // create function "within window of time"

//===ADX INDICATOR (No need to touch this)===

dirmov(len) =>
	up = change(high)
	down = -change(low)
	plusDM = na(up) ? na : (up > down and up > 0 ? up : 0)
	minusDM = na(down) ? na : (down > up and down > 0 ? down : 0)
	truerange = rma(tr, len)
	plus = fixnan(100 * rma(plusDM, len) / truerange)
	minus = fixnan(100 * rma(minusDM, len) / truerange)
	[plus, minus]
adx(dilen, adxlen) =>
	[plus, minus] = dirmov(dilen)
	sum = plus + minus
	adx = 100 * rma(abs(plus - minus) / (sum == 0 ? 1 : sum), adxlen)
sig = adx(dilen, adxlen)

//===QUADRATIC REGRESSION===
y = close
x1 = n
x2 = pow(x1,2)
//
S11 = sum(x2,length) - pow(sum(x1,length),2)/length
S12 = sum(x1*x2,length) - (sum(x1,length) * sum(x2,length))/length
S22 = sum(pow(x2,2),length) - pow(sum(x2,length),2)/length
Sy1 = sum(y*x1,length) - (sum(y,length)*sum(x1,length))/length
Sy2 = sum(y*x2,length) - (sum(y,length)*sum(x2,length))/length
//
max1 = sma(x1,length)
max2 = sma(x2,length)
may = sma(y,length)
b2 = ((Sy1 * S22) - (Sy2*S12))/(S22*S11 - pow(S12,2))
b3 = ((Sy2 * S11) - (Sy1 * S12))/(S22 * S11 - pow(S12,2))
b1 = may - b2*max1 - b3*max2
Y = b1 + b2*x1 + b3*x2
//
plot(Y,color=red,transp=0)
//
//===END QUADRATIC REGRESSION===

// MEASURES

diff1 = Y - Y[1]            // Current Y - Y of previous day
diff2 = Y[1] - Y[2]         // Y of previous day - Y of 2 days ago

fast_sma = sma(close, 5)    // Self-explanatory
slow_sma = sma(close, 20)

//===Entry/Buy/Exit conditions===
entry_cond  = diff1 > diff_tol  and diff2 < diff_tol      and sig > sig_tol    and window()
exit_cond   = ((diff2 > diff_tol and diff1 < diff_tol) or 
             (diff1 < -1 * diff_tol * 10) or 
                 (close[1] - close > diff_tol * 10)) and sig > sig_tol+exit_tol    and window()

//===Markers===
plotchar(entry_cond, char="E")
plotchar(exit_cond, char="X")

//===Orders===
strategy.entry("Entry", strategy.long, when = entry_cond)
strategy.order("Sell", strategy.short, qty = strategy.position_size, when = exit_cond and strategy.position_size > 0)